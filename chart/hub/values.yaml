## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry and imagePullSecrets
##
#  global:
#   imageRegistry: myRegistryName
#   imagePullSecrets:
#     - myRegistryKeySecretName

# the namespace where the potter-controller instance is deployed
controllerNamespace: potter-controller

# The frontend service is the main reverse proxy used to access the Potter UI
# To expose Potter externally either configure the ingress object below or
# set frontend.service.type=LoadBalancer in the frontend configuration.
# ref: http://kubernetes.io/docs/user-guide/ingress/
ingress:
  # Set to true to enable ingress record generation
  enabled: false

  # Set this to true in order to add the corresponding annotations for cert-manager
  certManager: false

  # Use certificate generation provided by gardener (works only on gardener shoot clusters)
  # You also have to set tls to true in the hosts section
  # Keep in mind that the first domain in the hosts section must not exceed 64 characters
  gardenerCertManager: false

  # Use DNS manager provided by gardener
  gardenerDNS: false

  # Additional ingress annotations
  # For a full list of possible ingress annotations, please see
  # ref: https://github.com/kubernetes/ingress-nginx/blob/master/docs/annotations.md
  # If certManager is set to true, annotation kubernetes.io/tls-acme: "true" will automatically be set
  annotations:
  #  kubernetes.io/ingress.class: nginx
    # Keep the connection open with the API server even if idle (the default is 60 seconds)
    # Setting it to 10 minutes which should be enough for our current use case of deploying/upgrading/deleting apps
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/server-tokens: "false"

  # The list of hostnames to be covered with this ingress record.
  # Most likely this will be just one host, but in the event more hosts are needed, this is an array
  hosts:
  - names:
    - hub.local
    path: /

    # Set this to true in order to enable TLS on the ingress record
    tls: false

    ## If TLS is set to true, you must declare what secret will store the key/certificate for TLS
    tlsSecret: hub.tls-secret

  health:
    annotations:
      nginx.ingress.kubernetes.io/limit-connections: "100"
      nginx.ingress.kubernetes.io/limit-rate: "100"
      nginx.ingress.kubernetes.io/limit-rate-after: "10000000"
      nginx.ingress.kubernetes.io/limit-rps: "10"

    # Username for health check endpoints
    user: admin
    # Password for health check endpoints
    password: admin

  secrets:
  # If you're providing your own certificates, please use this to add the certificates as secrets
  # key and certificate should start with -----BEGIN CERTIFICATE----- or
  # -----BEGIN RSA PRIVATE KEY-----
  #
  # name should line up with a tlsSecret set further up
  # If you're using cert-manager, this is unneeded, as it will create the secret for you if it is not set
  #
  # It is also possible to create and manage the certificates outside of this helm chart
  # Please see README.md for more information
  # - name: kubeapps.local-tls
  #   key:
  #   certificate:

frontend:
  replicaCount: 2
  image:
    registry: eu.gcr.io
    repository: sap-gcp-k8s-wm-live/securityapprovedbaseimages/nginx
    tag: 1.18.0-alpine
  service:
    port: 80
    # Set type to LoadBalancer and enable the parameter below with a value to have a static load balancer IP
    type: ClusterIP
    #loadBalancerIP:
    annotations: {}
  livenessProbe:
    httpGet:
      path: /healthz
      port: 8080
    initialDelaySeconds: 60
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /healthz
      port: 8080
    initialDelaySeconds: 0
    timeoutSeconds: 5
  resources:
    limits:
      cpu: 250m
      memory: 128Mi
    requests:
      cpu: 25m
      memory: 32Mi
  nodeSelector: {}
  tolerations: []
  affinityLabel:
    key: hub.k8s.sap.com/antiaffinity
    value: frontend
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: hub.k8s.sap.com/antiaffinity
                operator: In
                values:
                  - frontend
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: hub.k8s.sap.com/antiaffinity
                  operator: In
                  values:
                    - frontend
            topologyKey: topology.kubernetes.io/zone

# AppRepository Controller is the controller that manages the Helm Chart repository syncs
apprepository:
  # Enabling "enableDedicatedSyncNode" will spawn all apprepo sync jobs on a dedicated node.
  # It is advisable to use this options for a large number of apprepos.
  # That node requires the following configuration:
  # taints:
  # - key: "hub.k8s.sap.com/apprepo-sync-node"
  #   effect: "NoSchedule"
  # labels:
  #   hub.k8s.sap.com/apprepo-sync-node: "true"
  enableDedicatedSyncNode: false
  # Running a single controller replica to avoid sync job duplication
  replicaCount: 1
  # Schedule for cleaning up sync jobs that were triggered by the apprepo controller (not the CronJobs). Every day at midnight by default
  syncjobsCleanupCrontab: "0 0 * * *"
  # Schedule for syncing apprepositories. Every ten minutes by default
  crontab: "*/10 * * * *"
  image:
    registry: eu.gcr.io
    repository: <APPREPOSITORY_CONTROLLER_REPO>
    tag: <APPREPOSITORY_CONTROLLER_TAG>
    # Image used to perform chart repository syncs
  syncImage:
    registry: eu.gcr.io
    repository: sap-gcp-k8s-wm-live/hub/hubtokenbutler
    tag: <HUB_TOKEN_BUTLER_TAG>
  initialReposProxy:
    enabled: false
#    http_proxy: "http://yourproxy:3128"
#    https_proxy: "http://yourproxy:3128"
#    no_proxy: "0.0.0.0/0"
  initialRepos:
  - name: svc-cat
    url: https://svc-catalog-charts.storage.googleapis.com
  # Additional repositories
  # - name: chartmuseum
  #   url: https://chartmuseum.default:8080
  #   # Specify an Authorization Header if you are using an authentication method.
  #   authorizationHeader: "Bearer xrxNC..."
  #   # If you're providing your own certificates, please use this to add the certificates as secrets.
  #   # It should start with -----BEGIN CERTIFICATE----- or
  #   # -----BEGIN RSA PRIVATE KEY-----
  #   caCert:
  resources:
    limits:
      cpu: 250m
      memory: 128Mi
    requests:
      cpu: 25m
      memory: 32Mi
  nodeSelector: {}
  tolerations: []
  affinityLabel:
    key: hub.k8s.sap.com/antiaffinity
    value: apprepository
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: hub.k8s.sap.com/antiaffinity
                operator: In
                values:
                  - apprepository
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: hub.k8s.sap.com/antiaffinity
                  operator: In
                  values:
                    - apprepository
            topologyKey: topology.kubernetes.io/zone

# Hooks are used to perform actions like populating apprepositories
# or creating required resources during installation or upgrade
hooks:
  image:
    registry: eu.gcr.io
    repository: sap-gcp-k8s-wm-live/hub/kubectl
    tag: <KUBECTL_VERSION_TAG>
  nodeSelector: {}
  tolerations: []
  affinity: {}

uiBackend:
  replicaCount: 2
  image:
    registry: eu.gcr.io
    repository: <UI_BACKEND_REPO>
    tag: <UI_BACKEND_TAG>
  service:
    port: 8080
  tls: {}
    # ca:
    # cert:
    # key:
    # verify: false
  resources:
    limits:
      cpu: 250m
      memory: 512Mi
    requests:
      cpu: 25m
      memory: 128Mi
  nodeSelector: {}
  tolerations: []
  affinityLabel:
    key: hub.k8s.sap.com/antiaffinity
    value: uiBackend
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: hub.k8s.sap.com/antiaffinity
                operator: In
                values:
                  - uiBackend
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: hub.k8s.sap.com/antiaffinity
                  operator: In
                  values:
                    - uiBackend
            topologyKey: topology.kubernetes.io/zone
  # It's possible to modify the default timeout for install/upgrade/rollback/delete apps
  # (Default: 300s)
  # timeout: 300
  livenessProbe:
    httpGet:
      path: /live
      port: 8080
    initialDelaySeconds: 60
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 0
    timeoutSeconds: 5
  # Activates automatic deployment of an image pull secret into the target namespace.
  hubsec:
    enabled: false
    dockerconfigjson: ""
  # Configuration of health check endpoint
  health:
    config:
      # URL path prefix for all health check endpoints (must start with a "/", must not end with a "/")
      pathPrefix: /health
      # Frequency of the asynchronous background job which checks that the chart service is still serving any charts over its REST API
      chartsAvailableCheckInterval: 10m
  loglevel: warning

# Chartsvc is used to serve chart metadata over a REST API.
chartsvc:
  replicaCount: 2
  image:
    registry: eu.gcr.io
    repository: sap-gcp-k8s-wm-live/oss/kubeapps-chartsvc
    tag: 1.9.0-r0
  service:
    port: 8080
  resources:
    limits:
      cpu: 250m
      memory: 128Mi
    requests:
      cpu: 25m
      memory: 32Mi
  livenessProbe:
    httpGet:
      path: /live
      port: 8080
    initialDelaySeconds: 60
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /ready
      port: 8080
    initialDelaySeconds: 0
    timeoutSeconds: 5
  nodeSelector: {}
  tolerations: []
  affinityLabel:
    key: hub.k8s.sap.com/antiaffinity
    value: chartsvc
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: hub.k8s.sap.com/antiaffinity
                operator: In
                values:
                  - chartsvc
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: hub.k8s.sap.com/antiaffinity
                  operator: In
                  values:
                    - chartsvc
            topologyKey: topology.kubernetes.io/zone

# Dashboard serves the compiled static React frontend application. This is an
# internal service used by the main frontend reverse-proxy and should not be
# accessed directly.
dashboard:
  replicaCount: 2
  image:
    registry: eu.gcr.io
    repository: <DASHBOARD_REPO>
    tag: <DASHBOARD_TAG>
  service:
    port: 8080
  livenessProbe:
    httpGet:
      path: /
      port: 8080
    initialDelaySeconds: 60
    timeoutSeconds: 5
  readinessProbe:
    httpGet:
      path: /
      port: 8080
    initialDelaySeconds: 0
    timeoutSeconds: 5
  resources:
    limits:
      cpu: 250m
      memory: 128Mi
    requests:
      cpu: 25m
      memory: 32Mi
  nodeSelector: {}
  tolerations: []
  affinityLabel:
    key: hub.k8s.sap.com/antiaffinity
    value: dashboard
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: hub.k8s.sap.com/antiaffinity
                operator: In
                values:
                  - dashboard
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: hub.k8s.sap.com/antiaffinity
                  operator: In
                  values:
                    - dashboard
            topologyKey: topology.kubernetes.io/zone
  # Info message that gets displayed when "all repositories" is selected in the catalog view
  generalRepoInfo: You have selected repositories that might contain open source software.<br/>Please be aware of any open source guidelines.
  # Info message that gets displayed when the UI is called without a target cluster in the URL
  staticCatalogInfo: You are currently viewing the read-only Potter-Hub catalog, where cluster deployments cannot be managed. To manage deployments, open the Potter dashboard with a target cluster in the URL.
  # The app name that is displayed in the UI
  appName: Potter
  # # List of chart ids (<apprepo>/<chartname>) that should be highlighted in the catalog view
  # featuredChartIds:
  # - stable/grafana
  # - stable/traefik

  header:
    helpMenu:
      # List of links that gets displayed in the help menu
      links:
      - title: Hub Docs
        href: https://gardener.github.io/potter-docs/hub-docs/home/
      - title: Controller Docs
        href: https://gardener.github.io/potter-docs/controller-docs/home/
      - title: Report a Bug
        href: https://github.com/gardener/potter-hub/issues/new/choose
  footer:
    # First section of links that gets displayed in the footer
    sectionOne:
      title: About
      links:
      - title: Project Potter
        href: https://gardener.github.io/potter-docs/
      - title: Project Gardener
        href: https://gardener.cloud/
    # # Second section of links that gets displayed in the footer
    # sectionTwo:
    #   title: Site Information
    #   links:
    #   - title: Legal Disclosure
    #     href:
    #   - title: Terms of use
    #     href:

## MongoDB chart configuration
## mongodb image is now part of our build
mongodb:
  image:
    registry: <MONGODB_REGISTRY>
    repository: <MONGODB_REPOSITORY>
    tag: <MONGODB_TAG>

  volumePermissions:
    enabled: false
    image:
      registry: eu.gcr.io
      repository: sap-gcp-k8s-wm-live/oss/minideb
      tag: buster

  metrics:
    enabled: false
    image:
      registry: <MONGODB_EXPORTER_REGISTRY>
      repository: <MONGODB_EXPORTER_REPOSITORY>
      tag: <MONGODB_EXPORTER_TAG>

  # Potter-Hub uses MongoDB as a cache and persistence is not required
  persistence:
    enabled: false
  existingSecret: kubeapps-mongodb
  securityContext:
    enabled: false
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 256Mi

nodeSelector: {}

tolerations: []

affinity: {}

# For RBAC support:
rbac:
  # Perform creation of RBAC resources
  create: true

## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext:
  enabled: false
  runAsUser: 1001
  # fsGroup: 1001

# Auth proxy for OIDC support
authProxy:
  enabled: true
  # URL of the cluster which validates OIDC tokens and contains the target cluster kubeconfig secrets
  oidcClusterURL:
  # CA data of OIDC cluster. For self-signed certificates (optional)
  oidcClusterCA:
  # URL of the OIDC provider
  discoveryURL:
  # Client id of the Potter-Hub installation in the OIDC provider
  clientID:
  # Client secret of the Potter-Hub installation in the OIDC provider
  clientSecret:
  # Additional CLI flags, see also: https://www.keycloak.org/docs/latest/securing_apps/index.html#configuration-options
  additionalFlags:
    # - --secure-cookie=false
    # - --scopes=<your-scope-1>
    # - --scopes=<your-scope-2>
    # - --oauth-uri=<your-uri>
  enableLogging: false
  image:
    registry: eu.gcr.io
    repository: sap-gcp-k8s-wm-live/oss/keycloak-gatekeeper
    tag: 2.3.0-scratch-r4
  resources:
    limits:
      cpu: 250m
      memory: 128Mi
    requests:
      cpu: 25m
      memory: 32Mi
