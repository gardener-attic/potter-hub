// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders a basic deployment with a disk size 1`] = `
<BasicDeploymentForm
  appValues=""
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "size",
        "render": "slider",
        "type": "string",
        "value": "10Gi",
      },
    ]
  }
>
  <div
    className="margin-t-normal"
  >
    <div
      key="size-0"
    >
      <div
        hidden={false}
        key="size-0"
      >
        <SliderParam
          handleBasicFormParamChange={[MockFunction]}
          id="size-0"
          label="size"
          max={1000}
          min={1}
          param={
            Object {
              "path": "size",
              "render": "slider",
              "type": "string",
              "value": "10Gi",
            }
          }
          unit=""
        >
          <div>
            <label
              htmlFor="size-0"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    size
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <div
                    className="row"
                  >
                    <div
                      className="col-9"
                    >
                      <Slider
                        default={10}
                        max={1000}
                        min={1}
                        onChange={[Function]}
                        onUpdate={[Function]}
                        values={10}
                      >
                        <Slider
                          component="div"
                          disabled={false}
                          domain={
                            Array [
                              1,
                              1000,
                            ]
                          }
                          flatten={false}
                          mode={1}
                          onChange={[Function]}
                          onSlideEnd={[Function]}
                          onSlideStart={[Function]}
                          onUpdate={[Function]}
                          reversed={false}
                          rootProps={Object {}}
                          rootStyle={
                            Object {
                              "margin": "1.2em",
                              "position": "relative",
                              "width": "90%",
                            }
                          }
                          step={1}
                          values={
                            Array [
                              10,
                            ]
                          }
                          vertical={false}
                          warnOnChanges={false}
                        >
                          <div
                            style={
                              Object {
                                "margin": "1.2em",
                                "position": "relative",
                                "width": "90%",
                              }
                            }
                          >
                            <Rail
                              activeHandleID={null}
                              emitKeyboard={[Function]}
                              emitMouse={[Function]}
                              emitTouch={[Function]}
                              getEventData={[Function]}
                              handles={
                                Array [
                                  Object {
                                    "id": "$$-0",
                                    "percent": 0.9009009009009009,
                                    "value": 10,
                                  },
                                ]
                              }
                              key=".0"
                              scale={
                                LinearScale {
                                  "domain": Array [
                                    1,
                                    1000,
                                  ],
                                  "interpolator": [Function],
                                  "range": Array [
                                    0,
                                    100,
                                  ],
                                }
                              }
                            >
                              <div
                                onMouseDown={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "backgroundColor": "rgb(155,155,155)",
                                    "borderRadius": 7,
                                    "cursor": "pointer",
                                    "height": 14,
                                    "position": "absolute",
                                    "width": "100%",
                                  }
                                }
                              />
                            </Rail>
                            <Handles
                              activeHandleID={null}
                              emitKeyboard={[Function]}
                              emitMouse={[Function]}
                              emitTouch={[Function]}
                              getEventData={[Function]}
                              handles={
                                Array [
                                  Object {
                                    "id": "$$-0",
                                    "percent": 0.9009009009009009,
                                    "value": 10,
                                  },
                                ]
                              }
                              key=".1"
                              scale={
                                LinearScale {
                                  "domain": Array [
                                    1,
                                    1000,
                                  ],
                                  "interpolator": [Function],
                                  "range": Array [
                                    0,
                                    100,
                                  ],
                                }
                              }
                            >
                              <div
                                className="slider-handles"
                              >
                                <Handle
                                  domain={
                                    Array [
                                      1,
                                      1000,
                                    ]
                                  }
                                  getHandleProps={[Function]}
                                  handle={
                                    Object {
                                      "id": "$$-0",
                                      "percent": 0.9009009009009009,
                                      "value": 10,
                                    }
                                  }
                                  key="$$-0"
                                >
                                  <div
                                    aria-valuemax={1000}
                                    aria-valuemin={1}
                                    aria-valuenow={10}
                                    onKeyDown={[Function]}
                                    onMouseDown={[Function]}
                                    onTouchStart={[Function]}
                                    role="slider"
                                    style={
                                      Object {
                                        "backgroundColor": "#34568f",
                                        "borderRadius": "50%",
                                        "boxShadow": "1px 1px 1px 1px rgba(0, 0, 0, 0.2)",
                                        "cursor": "pointer",
                                        "height": 24,
                                        "left": "0.9009009009009009%",
                                        "marginLeft": "-11px",
                                        "marginTop": "-6px",
                                        "position": "absolute",
                                        "width": 24,
                                        "zIndex": 2,
                                      }
                                    }
                                  />
                                </Handle>
                              </div>
                            </Handles>
                            <Tracks
                              activeHandleID={null}
                              emitKeyboard={[Function]}
                              emitMouse={[Function]}
                              emitTouch={[Function]}
                              getEventData={[Function]}
                              handles={
                                Array [
                                  Object {
                                    "id": "$$-0",
                                    "percent": 0.9009009009009009,
                                    "value": 10,
                                  },
                                ]
                              }
                              key=".2"
                              left={true}
                              right={false}
                              scale={
                                LinearScale {
                                  "domain": Array [
                                    1,
                                    1000,
                                  ],
                                  "interpolator": [Function],
                                  "range": Array [
                                    0,
                                    100,
                                  ],
                                }
                              }
                            >
                              <div
                                className="slider-tracks"
                              >
                                <Track
                                  getTrackProps={[Function]}
                                  key="$-$$-0"
                                  source={
                                    Object {
                                      "id": "$",
                                      "percent": 0,
                                      "value": 1,
                                    }
                                  }
                                  target={
                                    Object {
                                      "id": "$$-0",
                                      "percent": 0.9009009009009009,
                                      "value": 10,
                                    }
                                  }
                                >
                                  <div
                                    onMouseDown={[Function]}
                                    onTouchStart={[Function]}
                                    style={
                                      Object {
                                        "backgroundColor": "#7aa0c4",
                                        "borderRadius": 7,
                                        "cursor": "pointer",
                                        "height": 14,
                                        "left": "0%",
                                        "position": "absolute",
                                        "width": "0.9009009009009009%",
                                        "zIndex": 1,
                                      }
                                    }
                                  />
                                </Track>
                              </div>
                            </Tracks>
                          </div>
                        </Slider>
                      </Slider>
                    </div>
                    <div
                      className="col-3"
                    >
                      <input
                        className="disk_size_input"
                        id="size-0"
                        onChange={[Function]}
                        value={10}
                      />
                      <span
                        className="margin-l-normal"
                      />
                    </div>
                  </div>
                </div>
              </div>
            </label>
          </div>
        </SliderParam>
      </div>
      <hr />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a email 1`] = `
<BasicDeploymentForm
  appValues=""
  handleBasicFormParamChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "wordpressEmail",
            "value": "user@example.com",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": [MockFunction],
        },
      ],
    }
  }
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "wordpressEmail",
        "value": "user@example.com",
      },
    ]
  }
>
  <div
    className="margin-t-normal"
  >
    <div
      key="wordpressEmail-0"
    >
      <div
        hidden={false}
        key="wordpressEmail-0"
      >
        <TextParam
          handleBasicFormParamChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "path": "wordpressEmail",
                    "value": "user@example.com",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
              ],
            }
          }
          id="wordpressEmail-0"
          inputType="string"
          label="wordpressEmail"
          param={
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            }
          }
        >
          <div>
            <label
              htmlFor="wordpressEmail-0"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    wordpressEmail
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <input
                    id="wordpressEmail-0"
                    onChange={[MockFunction]}
                    type="string"
                    value="user@example.com"
                  />
                </div>
              </div>
            </label>
          </div>
        </TextParam>
      </div>
      <hr />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a generic boolean 1`] = `
<BasicDeploymentForm
  appValues=""
  handleBasicFormParamChange={[MockFunction]}
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "enableMetrics",
        "type": "boolean",
        "value": true,
      },
    ]
  }
>
  <div
    className="margin-t-normal"
  >
    <div
      key="enableMetrics-0"
    >
      <div
        hidden={false}
        key="enableMetrics-0"
      >
        <BooleanParam
          handleBasicFormParamChange={[MockFunction]}
          id="enableMetrics-0"
          label="enableMetrics"
          param={
            Object {
              "path": "enableMetrics",
              "type": "boolean",
              "value": true,
            }
          }
        >
          <label
            htmlFor="enableMetrics-0"
          >
            <div
              className="margin-b-normal"
            >
              <span>
                enableMetrics
              </span>
              <ReactSwitch
                activeBoxShadow="0 0 2px 3px #3bf"
                boxShadow={null}
                checked={true}
                checkedIcon={
                  <svg
                    height="100%"
                    style={
                      Object {
                        "position": "absolute",
                        "top": 0,
                      }
                    }
                    viewBox="-2 -5 17 21"
                    width="100%"
                  >
                    <path
                      d="M11.264 0L5.26 6.004 2.103 2.847 0 4.95l5.26 5.26 8.108-8.107L11.264 0"
                      fill="#fff"
                      fillRule="evenodd"
                    />
                  </svg>
                }
                className="react-switch"
                disabled={false}
                height={28}
                id="enableMetrics-0"
                offColor="#888"
                offHandleColor="#fff"
                onChange={[Function]}
                onColor="#080"
                onHandleColor="#fff"
                uncheckedIcon={
                  <svg
                    height="100%"
                    style={
                      Object {
                        "position": "absolute",
                        "top": 0,
                      }
                    }
                    viewBox="-2 -5 14 20"
                    width="100%"
                  >
                    <path
                      d="M9.9 2.12L7.78 0 4.95 2.828 2.12 0 0 2.12l2.83 2.83L0 7.776 2.123 9.9 4.95 7.07 7.78 9.9 9.9 7.776 7.072 4.95 9.9 2.12"
                      fill="#fff"
                      fillRule="evenodd"
                    />
                  </svg>
                }
                width={56}
              >
                <div
                  className="react-switch"
                  style={
                    Object {
                      "MozTransition": "opacity 0.25s",
                      "MozUserSelect": "none",
                      "WebkitTapHighlightColor": "rgba(0, 0, 0, 0)",
                      "WebkitTransition": "opacity 0.25s",
                      "WebkitUserSelect": "none",
                      "borderRadius": 14,
                      "direction": "ltr",
                      "display": "inline-block",
                      "msUserSelect": "none",
                      "opacity": 1,
                      "position": "relative",
                      "textAlign": "left",
                      "touchAction": "none",
                      "transition": "opacity 0.25s",
                      "userSelect": "none",
                    }
                  }
                >
                  <div
                    className="react-switch-bg"
                    onClick={[Function]}
                    onMouseDown={[Function]}
                    style={
                      Object {
                        "MozTransition": "background 0.25s",
                        "WebkitTransition": "background 0.25s",
                        "background": "#008800",
                        "borderRadius": 14,
                        "cursor": "pointer",
                        "height": 28,
                        "margin": 0,
                        "position": "relative",
                        "transition": "background 0.25s",
                        "width": 56,
                      }
                    }
                  >
                    <div
                      style={
                        Object {
                          "MozTransition": "opacity 0.25s",
                          "WebkitTransition": "opacity 0.25s",
                          "height": 28,
                          "opacity": 1,
                          "pointerEvents": "none",
                          "position": "relative",
                          "transition": "opacity 0.25s",
                          "width": 30,
                        }
                      }
                    >
                      <svg
                        height="100%"
                        style={
                          Object {
                            "position": "absolute",
                            "top": 0,
                          }
                        }
                        viewBox="-2 -5 17 21"
                        width="100%"
                      >
                        <path
                          d="M11.264 0L5.26 6.004 2.103 2.847 0 4.95l5.26 5.26 8.108-8.107L11.264 0"
                          fill="#fff"
                          fillRule="evenodd"
                        />
                      </svg>
                    </div>
                    <div
                      style={
                        Object {
                          "MozTransition": "opacity 0.25s",
                          "WebkitTransition": "opacity 0.25s",
                          "height": 28,
                          "opacity": 0,
                          "pointerEvents": "none",
                          "position": "absolute",
                          "right": 0,
                          "top": 0,
                          "transition": "opacity 0.25s",
                          "width": 30,
                        }
                      }
                    >
                      <svg
                        height="100%"
                        style={
                          Object {
                            "position": "absolute",
                            "top": 0,
                          }
                        }
                        viewBox="-2 -5 14 20"
                        width="100%"
                      >
                        <path
                          d="M9.9 2.12L7.78 0 4.95 2.828 2.12 0 0 2.12l2.83 2.83L0 7.776 2.123 9.9 4.95 7.07 7.78 9.9 9.9 7.776 7.072 4.95 9.9 2.12"
                          fill="#fff"
                          fillRule="evenodd"
                        />
                      </svg>
                    </div>
                  </div>
                  <div
                    className="react-switch-handle"
                    onClick={[Function]}
                    onMouseDown={[Function]}
                    onTouchCancel={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    style={
                      Object {
                        "MozTransition": "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
                        "WebkitTransition": "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
                        "background": "#ffffff",
                        "border": 0,
                        "borderRadius": "50%",
                        "boxShadow": null,
                        "cursor": "pointer",
                        "display": "inline-block",
                        "height": 26,
                        "outline": 0,
                        "position": "absolute",
                        "top": 1,
                        "transform": "translateX(29px)",
                        "transition": "background-color 0.25s, transform 0.25s, box-shadow 0.15s",
                        "width": 26,
                      }
                    }
                  />
                  <input
                    checked={true}
                    disabled={false}
                    id="enableMetrics-0"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onFocus={[Function]}
                    onKeyUp={[Function]}
                    role="switch"
                    style={
                      Object {
                        "border": 0,
                        "clip": "rect(0 0 0 0)",
                        "height": 1,
                        "margin": -1,
                        "overflow": "hidden",
                        "padding": 0,
                        "position": "absolute",
                        "width": 1,
                      }
                    }
                    type="checkbox"
                  />
                </div>
              </ReactSwitch>
            </div>
          </label>
        </BooleanParam>
      </div>
      <hr />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a generic number 1`] = `
<BasicDeploymentForm
  appValues=""
  handleBasicFormParamChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "replicas",
            "type": "integer",
            "value": 1,
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": [MockFunction],
        },
      ],
    }
  }
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "replicas",
        "type": "integer",
        "value": 1,
      },
    ]
  }
>
  <div
    className="margin-t-normal"
  >
    <div
      key="replicas-0"
    >
      <div
        hidden={false}
        key="replicas-0"
      >
        <TextParam
          handleBasicFormParamChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "path": "replicas",
                    "type": "integer",
                    "value": 1,
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
              ],
            }
          }
          id="replicas-0"
          inputType="number"
          label="replicas"
          param={
            Object {
              "path": "replicas",
              "type": "integer",
              "value": 1,
            }
          }
        >
          <div>
            <label
              htmlFor="replicas-0"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    replicas
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <input
                    id="replicas-0"
                    onChange={[MockFunction]}
                    type="number"
                    value={1}
                  />
                </div>
              </div>
            </label>
          </div>
        </TextParam>
      </div>
      <hr />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a generic string 1`] = `
<BasicDeploymentForm
  appValues=""
  handleBasicFormParamChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "blogName",
            "type": "string",
            "value": "my-blog",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": [MockFunction],
        },
      ],
    }
  }
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "blogName",
        "type": "string",
        "value": "my-blog",
      },
    ]
  }
>
  <div
    className="margin-t-normal"
  >
    <div
      key="blogName-0"
    >
      <div
        hidden={false}
        key="blogName-0"
      >
        <TextParam
          handleBasicFormParamChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "path": "blogName",
                    "type": "string",
                    "value": "my-blog",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
              ],
            }
          }
          id="blogName-0"
          inputType="string"
          label="blogName"
          param={
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            }
          }
        >
          <div>
            <label
              htmlFor="blogName-0"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    blogName
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <input
                    id="blogName-0"
                    onChange={[MockFunction]}
                    type="string"
                    value="my-blog"
                  />
                </div>
              </div>
            </label>
          </div>
        </TextParam>
      </div>
      <hr />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a password 1`] = `
<BasicDeploymentForm
  appValues=""
  handleBasicFormParamChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "wordpressPassword",
            "value": "sserpdrow",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": [MockFunction],
        },
      ],
    }
  }
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "wordpressPassword",
        "value": "sserpdrow",
      },
    ]
  }
>
  <div
    className="margin-t-normal"
  >
    <div
      key="wordpressPassword-0"
    >
      <div
        hidden={false}
        key="wordpressPassword-0"
      >
        <TextParam
          handleBasicFormParamChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "path": "wordpressPassword",
                    "value": "sserpdrow",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
              ],
            }
          }
          id="wordpressPassword-0"
          inputType="string"
          label="wordpressPassword"
          param={
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            }
          }
        >
          <div>
            <label
              htmlFor="wordpressPassword-0"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    wordpressPassword
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <input
                    id="wordpressPassword-0"
                    onChange={[MockFunction]}
                    type="string"
                    value="sserpdrow"
                  />
                </div>
              </div>
            </label>
          </div>
        </TextParam>
      </div>
      <hr />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with a username 1`] = `
<BasicDeploymentForm
  appValues=""
  handleBasicFormParamChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "wordpressUsername",
            "value": "user",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": [MockFunction],
        },
      ],
    }
  }
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "wordpressUsername",
        "value": "user",
      },
    ]
  }
>
  <div
    className="margin-t-normal"
  >
    <div
      key="wordpressUsername-0"
    >
      <div
        hidden={false}
        key="wordpressUsername-0"
      >
        <TextParam
          handleBasicFormParamChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "path": "wordpressUsername",
                    "value": "user",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
              ],
            }
          }
          id="wordpressUsername-0"
          inputType="string"
          label="wordpressUsername"
          param={
            Object {
              "path": "wordpressUsername",
              "value": "user",
            }
          }
        >
          <div>
            <label
              htmlFor="wordpressUsername-0"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    wordpressUsername
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <input
                    id="wordpressUsername-0"
                    onChange={[MockFunction]}
                    type="string"
                    value="user"
                  />
                </div>
              </div>
            </label>
          </div>
        </TextParam>
      </div>
      <hr />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with custom configuration 1`] = `
<BasicDeploymentForm
  appValues=""
  handleBasicFormParamChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "configuration",
            "render": "textArea",
            "value": "First line
Second line",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": [MockFunction],
        },
      ],
    }
  }
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "configuration",
        "render": "textArea",
        "value": "First line
Second line",
      },
    ]
  }
>
  <div
    className="margin-t-normal"
  >
    <div
      key="configuration-0"
    >
      <div
        hidden={false}
        key="configuration-0"
      >
        <TextParam
          handleBasicFormParamChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "path": "configuration",
                    "render": "textArea",
                    "value": "First line
Second line",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
              ],
            }
          }
          id="configuration-0"
          inputType="string"
          label="configuration"
          param={
            Object {
              "path": "configuration",
              "render": "textArea",
              "value": "First line
Second line",
            }
          }
        >
          <div>
            <label
              htmlFor="configuration-0"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    configuration
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <input
                    id="configuration-0"
                    onChange={[MockFunction]}
                    type="string"
                    value="First line
Second line"
                  />
                </div>
              </div>
            </label>
          </div>
        </TextParam>
      </div>
      <hr />
    </div>
  </div>
</BasicDeploymentForm>
`;

exports[`renders a basic deployment with username, password, email and a generic string 1`] = `
<BasicDeploymentForm
  appValues=""
  handleBasicFormParamChange={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "path": "wordpressUsername",
            "value": "user",
          },
        ],
        Array [
          Object {
            "path": "wordpressPassword",
            "value": "sserpdrow",
          },
        ],
        Array [
          Object {
            "path": "wordpressEmail",
            "value": "user@example.com",
          },
        ],
        Array [
          Object {
            "path": "blogName",
            "type": "string",
            "value": "my-blog",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": [MockFunction],
        },
        Object {
          "type": "return",
          "value": [MockFunction],
        },
        Object {
          "type": "return",
          "value": [MockFunction],
        },
        Object {
          "type": "return",
          "value": [MockFunction],
        },
      ],
    }
  }
  handleValuesChange={[MockFunction]}
  params={
    Array [
      Object {
        "path": "wordpressUsername",
        "value": "user",
      },
      Object {
        "path": "wordpressPassword",
        "value": "sserpdrow",
      },
      Object {
        "path": "wordpressEmail",
        "value": "user@example.com",
      },
      Object {
        "path": "blogName",
        "type": "string",
        "value": "my-blog",
      },
    ]
  }
>
  <div
    className="margin-t-normal"
  >
    <div
      key="wordpressUsername-0"
    >
      <div
        hidden={false}
        key="wordpressUsername-0"
      >
        <TextParam
          handleBasicFormParamChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "path": "wordpressUsername",
                    "value": "user",
                  },
                ],
                Array [
                  Object {
                    "path": "wordpressPassword",
                    "value": "sserpdrow",
                  },
                ],
                Array [
                  Object {
                    "path": "wordpressEmail",
                    "value": "user@example.com",
                  },
                ],
                Array [
                  Object {
                    "path": "blogName",
                    "type": "string",
                    "value": "my-blog",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
              ],
            }
          }
          id="wordpressUsername-0"
          inputType="string"
          label="wordpressUsername"
          param={
            Object {
              "path": "wordpressUsername",
              "value": "user",
            }
          }
        >
          <div>
            <label
              htmlFor="wordpressUsername-0"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    wordpressUsername
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <input
                    id="wordpressUsername-0"
                    onChange={[MockFunction]}
                    type="string"
                    value="user"
                  />
                </div>
              </div>
            </label>
          </div>
        </TextParam>
      </div>
      <hr />
    </div>
    <div
      key="wordpressPassword-1"
    >
      <div
        hidden={false}
        key="wordpressPassword-1"
      >
        <TextParam
          handleBasicFormParamChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "path": "wordpressUsername",
                    "value": "user",
                  },
                ],
                Array [
                  Object {
                    "path": "wordpressPassword",
                    "value": "sserpdrow",
                  },
                ],
                Array [
                  Object {
                    "path": "wordpressEmail",
                    "value": "user@example.com",
                  },
                ],
                Array [
                  Object {
                    "path": "blogName",
                    "type": "string",
                    "value": "my-blog",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
              ],
            }
          }
          id="wordpressPassword-1"
          inputType="string"
          label="wordpressPassword"
          param={
            Object {
              "path": "wordpressPassword",
              "value": "sserpdrow",
            }
          }
        >
          <div>
            <label
              htmlFor="wordpressPassword-1"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    wordpressPassword
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <input
                    id="wordpressPassword-1"
                    onChange={[MockFunction]}
                    type="string"
                    value="sserpdrow"
                  />
                </div>
              </div>
            </label>
          </div>
        </TextParam>
      </div>
      <hr />
    </div>
    <div
      key="wordpressEmail-2"
    >
      <div
        hidden={false}
        key="wordpressEmail-2"
      >
        <TextParam
          handleBasicFormParamChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "path": "wordpressUsername",
                    "value": "user",
                  },
                ],
                Array [
                  Object {
                    "path": "wordpressPassword",
                    "value": "sserpdrow",
                  },
                ],
                Array [
                  Object {
                    "path": "wordpressEmail",
                    "value": "user@example.com",
                  },
                ],
                Array [
                  Object {
                    "path": "blogName",
                    "type": "string",
                    "value": "my-blog",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
              ],
            }
          }
          id="wordpressEmail-2"
          inputType="string"
          label="wordpressEmail"
          param={
            Object {
              "path": "wordpressEmail",
              "value": "user@example.com",
            }
          }
        >
          <div>
            <label
              htmlFor="wordpressEmail-2"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    wordpressEmail
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <input
                    id="wordpressEmail-2"
                    onChange={[MockFunction]}
                    type="string"
                    value="user@example.com"
                  />
                </div>
              </div>
            </label>
          </div>
        </TextParam>
      </div>
      <hr />
    </div>
    <div
      key="blogName-3"
    >
      <div
        hidden={false}
        key="blogName-3"
      >
        <TextParam
          handleBasicFormParamChange={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "path": "wordpressUsername",
                    "value": "user",
                  },
                ],
                Array [
                  Object {
                    "path": "wordpressPassword",
                    "value": "sserpdrow",
                  },
                ],
                Array [
                  Object {
                    "path": "wordpressEmail",
                    "value": "user@example.com",
                  },
                ],
                Array [
                  Object {
                    "path": "blogName",
                    "type": "string",
                    "value": "my-blog",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
                Object {
                  "type": "return",
                  "value": [MockFunction],
                },
              ],
            }
          }
          id="blogName-3"
          inputType="string"
          label="blogName"
          param={
            Object {
              "path": "blogName",
              "type": "string",
              "value": "my-blog",
            }
          }
        >
          <div>
            <label
              htmlFor="blogName-3"
            >
              <div
                className="row"
              >
                <div
                  className="col-3 block"
                >
                  <div
                    className="centered"
                  >
                    blogName
                  </div>
                </div>
                <div
                  className="col-9 margin-t-small"
                >
                  <input
                    id="blogName-3"
                    onChange={[MockFunction]}
                    type="string"
                    value="my-blog"
                  />
                </div>
              </div>
            </label>
          </div>
        </TextParam>
      </div>
      <hr />
    </div>
  </div>
</BasicDeploymentForm>
`;
